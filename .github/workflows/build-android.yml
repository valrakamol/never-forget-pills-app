# .github/workflows/build-android.yml

name: Build Android APK

on:
  # --- ทริกเกอร์: ให้ Workflow นี้ทำงานเมื่อมีการ push ไปที่ branch 'main' ---
  push:
    branches: [ "main" ]
  # --- ทริกเกอร์: อนุญาตให้รัน Workflow นี้เองได้จากหน้า Actions บน GitHub ---
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest # ใช้ Linux Environment ของ GitHub

    steps:
      # --- 1. เช็คเอาท์โค้ดจาก Repository ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 2. ตั้งค่า Java Environment (จำเป็นสำหรับ Android SDK) ---
      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      # --- 3. ตั้งค่า Python Environment ---
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # --- 4. ติดตั้ง Dependencies ของ Buildozer ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython
          pip install buildozer
          pip install "python-for-android==2024.05.21"
          sudo apt-get update
          sudo apt-get install -y libffi-dev libssl-dev

      # --- 5. เข้าไปที่โฟลเดอร์ frontend ---
      - name: Navigate to frontend directory
        run: cd frontend
        
      # --- 6. รัน Buildozer เพื่อสร้าง APK ---
      #    (เราจะใช้ `working-directory` เพื่อให้คำสั่งรันในโฟลเดอร์ frontend)
      - name: Build with Buildozer
        working-directory: ./frontend
        run: buildozer -v android debug

      # --- 7. อัปโหลดไฟล์ APK ที่ Build เสร็จแล้วเป็น Artifact ---
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: medireminder-apk
          path: frontend/bin/*.apk